diff --git a/CMakeLists.txt b/CMakeLists.txt
index 878d265..f96256b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,11 +1,13 @@
 # Specify the minimum version for CMake
 cmake_minimum_required(VERSION 3.10)
 
+# Project's name
+project(libhandlegraph VERSION 0.0.1 LANGUAGES CXX)
+
 # This defines default install directories like "lib"
 include(GNUInstallDirs)
+include(CMakePackageConfigHelpers)
 
-# Project's name
-project(libhandlegraph)
 # We build using c++14
 set(CMAKE_CXX_STANDARD 14)
 
@@ -21,13 +23,13 @@ if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
     # an absolute path instead. This will let us actually find the library when
     # we use it as a CMake external project and don't fully install it to any
     # normal lib directory.
-    message("libhandlegraph is root project or external_project")
+    message(STATUS "libhandlegraph is root project or external_project")
     set (CMAKE_MACOSX_RPATH OFF)
 else()
     # We are probably an add_subdirectory. We will expect to be in the root
     # project's lib directory, so we do want to have our non-installed
     # install_name use @rpath.
-    message("libhandlegraph is add_subdirectory project")
+    message(STATUS "libhandlegraph is add_subdirectory project")
     set (CMAKE_MACOSX_RPATH ON)
 endif()
 
@@ -111,16 +113,37 @@ set_target_properties(handlegraph_objs PROPERTIES POSITION_INDEPENDENT_CODE TRUE
 # Make sure to give them interface include directories that depending targets can use.
 add_library(handlegraph_shared SHARED $<TARGET_OBJECTS:handlegraph_objs>)
 set_target_properties(handlegraph_shared PROPERTIES OUTPUT_NAME handlegraph)
-target_include_directories(handlegraph_shared INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/src/include")
+target_include_directories(handlegraph_shared
+	INTERFACE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src/include>;$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>)
 add_library(handlegraph_static STATIC $<TARGET_OBJECTS:handlegraph_objs>)
 set_target_properties(handlegraph_static PROPERTIES OUTPUT_NAME handlegraph)
-target_include_directories(handlegraph_static INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/src/include")
+target_include_directories(handlegraph_static
+	INTERFACE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src/include>;$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>)
+add_library(handlegraph ALIAS handlegraph_shared)
 
 # Set up for installability
-install(TARGETS handlegraph_shared handlegraph_static 
+# Creating the package configuration file
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/libhandlegraph-config.cmake.in
+	"${CMAKE_CURRENT_BINARY_DIR}/libhandlegraph-config.cmake"
+	INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libhandlegraph)
+# Generating the version file for the configuration file
+write_basic_package_version_file(
+	"${CMAKE_CURRENT_BINARY_DIR}/libhandlegraph-config-version.cmake"
+	VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"
+	COMPATIBILITY AnyNewerVersion)
+# Install generated configuration files
+install(FILES "${CMAKE_CURRENT_BINARY_DIR}/libhandlegraph-config.cmake"
+	"${CMAKE_CURRENT_BINARY_DIR}/libhandlegraph-config-version.cmake"
+	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libhandlegraph)
+
+install(TARGETS handlegraph_shared handlegraph_static
+  EXPORT libhandlegraph-targets
   RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
   LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+install(EXPORT libhandlegraph-targets
+	NAMESPACE handlegraph::
+	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libhandlegraph)
 install(DIRECTORY src/include/handlegraph
   DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
   FILES_MATCHING PATTERN "*.hpp"
